use std::env;
use std::error::Error;
use std::path::Path;
use std::fs::File;
use std::io::BufReader;
use std::io::BufRead;
use std::cmp::Ordering;

fn rabin_karp(sent: &str, pat: &str) -> i32 {
    let m = pat.len();
    let n = sent.len();

    if n < m {
        return -1;
    }

    // initialize hashes
    let (pat, hp) = hash(&pat);
    let sub = String::from(sent).chars().take(m).collect::<String>();
    let (mut sub, mut hs) = hash(&sub);

    for i in m..n-1 {
        if hp == hs {
            match sub.cmp(&pat) {
                Ordering::Equal => return i as i32,
                _               => {}
            }
        }

        // update the hash and the substring
        match proceed(&sub, sent.chars().nth(i).unwrap()) {
            (s, n) => {
                sub = s;
                hs = n;
            }
        }
    }

    -2
}

fn proceed(sub: &str, next: char, h: u64) -> (String, u64) {
    let mut sub = String::from(sub);
    sub.push(next);
    let prev = sub.remove(0) as i32;

    let h = (h - base * prev) * base + next;
    
    (sub, h)
}

fn hash(sub: &str) -> (String, u64) {
    let mut h = 0;



    (String::from(sub), 1)
}

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len() != 3 {
        panic!("Usage : cargo run text_filename pattern_filename");
    }

    // read text file
    let path = Path::new(&args[1]);
    let mut reader = BufReader::new(
        match File::open(&path) {
            Err(why)    => panic!("Could not open a file. :{}", Error::description(&why)),
            Ok(file)    => file,
        });
    let mut text = String::new();
    let _ = reader.read_line(&mut text);
    let text = text;

    // read pattern file
    let path = Path::new(&args[2]);
    let mut reader = BufReader::new(
        match File::open(&path) {
            Err(why)    => panic!("Could not open a file. :{}", Error::description(&why)),
            Ok(file)    => file,
        });
    let mut pattern = String::new();
    let _ = reader.read_line(&mut pattern);
    let pattern = &pattern.trim_right();
    println!("Pattern : \"{}\"", pattern);

    println!("{}", rabin_karp(&text, &pattern));
}
